Lab 8

(5 points) Write a main program that calls the following method with a number of the user’s choice, and prints the result
(main and this method should be in same file)

import java.io.*;
import java.util.*;
import java.text.*;

public class Lab8PartI
{
   public static void main(String[] args)
   {
      Scanner scan = new Scanner(System.in);
      int number = scan.nextInt();
      System.out.println(mystery(number));
   }
   
   public static int mystery (int num)
   {
      if(num<=2)
      {
         return 1;
      }
      else
      {
        return mystery(num-1)+mystery(num-2);
      }
   }
}

(5 points) Try the program entering numbers 5 through 7 and make sure the results agree with your trace from class.

5 = 5
6 = 8
7 = 13
         5                       6                                      7
       /   \                  /     \                             /          \
      4     3                5       4                           6            5
     / \   / \              / \      / \                        / \          / \
    3   2 2   1           4    3     3  2                      5    4        4   3
   / \                   / \  / \   / \                       / \  / \      / \ / \
  2   1                  3  2 2  1 2   1                    4   3  3  2    3  2 2  1
                        / \                                / \ / \ /\     / \
                       2   1                              3  2 2 1 2 1   2   1
                                                         / \
                                                        2   1

(10 points) Add a method to your program that calculates the same thing iteratively. Have your main call both methods with the following 
numbers: 7, 14, 35, 40, 42, 46. Make sure to call the iterative version first and watch for the results.

7 = 13
14 = 377
35 = 9227465
40 = 102334155
42 = 267914296
46 = 1836311903

(10 points) What do you observe about the time it takes to do the calculations iteratively compared to recursively?

Iteratively, the calculations are much faster compared to recursively. Iterative is more time efficient than recursive.

(30 points) What is your explanation? You should gain some insight from the tree you drew in class. It is more than just the time it takes 
to create the stack of methods!

When solving the formula recursively, it starts from the initial value and then fans out creating a tree like structure. That tree contains
a lot more data which means there is a lot more information to got through. Iteratively, all it does it finds the values starting from the 
bottom and orking its' way to the top of what the value is. It is a shorter way to find the answer and does not contain as much information.

(40 points) Create a recursive method to count the number of 0’s in an array.

import java.io.*;
import java.util.*;
import java.text.*;

public class Lab8PartIII
{  
   static int count;
   static int [] myArray = {4, 8, 23, 70, 0, 34, 0, 0, 0};
   
   public static void main(String[] args)
   {     
      getZero(0, myArray, 0);
      System.out.println("There are "+getZero(0, myArray, 0)+" 0's in the array.");
   }
   
   public static int getZero(int start, int [] myArray, int count)   //The resursion method to find the 0's
   {
      if(start!=myArray.length)
      {
         System.out.println(myArray[start]);
         
         if(myArray[start]!=0)
         {
            return getZero(start+1, myArray, count);
         }
         else
         {
            if(myArray[start] == 0)
            {
               return getZero(start+1, myArray, count+1);
            }
         }
      }
   return count;
   }
}